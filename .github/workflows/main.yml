# --- .github/workflows/main.yml (Handles Terminated State) ---hi

name: TechNova CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  provision:
    name: 'Terraform Provisioning'
    runs-on: ubuntu-latest
    outputs:
      instance_ip: ${{ steps.get_ip.outputs.ip }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      # --- THIS IS THE FIX ---
      # This step now has logic to handle the 'terminated' state correctly.
      - name: Ensure Instance is Running and Get IP
        id: get_ip
        run: |
          # Get the Instance ID using the tag.
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=TechNova-Server-Terraform" "Name=instance-state-name,Values=running,stopped" --query "Reservations[0].Instances[0].InstanceId" --output text)
          
          if [ "$INSTANCE_ID" == "None" ]; then
            echo "No running or stopped instance found with tag 'TechNova-Server-Terraform'. This is unexpected."
            echo "Please re-run 'terraform apply' to create a new instance."
            exit 1
          fi
          
          echo "Found Instance ID: $INSTANCE_ID"

          # Check the current state of the instance.
          INSTANCE_STATE=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].State.Name" --output text)
          echo "Instance state is: $INSTANCE_STATE"

          # If the instance is stopped, start it.
          if [ "$INSTANCE_STATE" == "stopped" ]; then
            echo "Instance is stopped. Sending start command..."
            aws ec2 start-instances --instance-ids $INSTANCE_ID
            echo "Waiting for instance to enter 'running' state..."
            aws ec2 wait instance-running --instance-ids $INSTANCE_ID
            echo "Instance is now running."
          elif [ "$INSTANCE_STATE" == "terminated" ]; then
            echo "FATAL: The instance has been terminated. A new 'terraform apply' is required."
            exit 1
          fi
          
          # Now that we know it's running, get the public IP.
          ip_address=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "Instance Public IP: $ip_address"
          echo "ip=${ip_address}" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy and Configure CloudWatch Agent
    runs-on: ubuntu-latest
    needs: provision

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install and Configure CloudWatch Agent
        run: |
          echo "Starting CloudWatch Agent..."
          sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json -s
          echo "CloudWatch Agent configured and started."

  analyze-logs:
    name: Analyze CloudWatch Logs
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install boto3

      - name: Analyze Logs from CloudWatch
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          import boto3

          client = boto3.client('logs', region_name='${{ secrets.AWS_REGION }}')
          log_group = 'TechNova-App-Logs'

          response = client.filter_log_events(
              logGroupName=log_group,
              filterPattern='?ERROR ?Exception',
              limit=20
          )

          print('ðŸ”µ Recent Errors:')
          for event in response.get('events', []):
              print(event['message'])

          if not response.get('events'):
              print('âœ… No errors found.')
