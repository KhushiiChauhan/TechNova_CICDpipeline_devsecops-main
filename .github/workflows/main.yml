# --- .github/workflows/main.yml (Handles Terminated State) ---

name: TechNova CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  provision:
    name: 'Terraform Provisioning'
    runs-on: ubuntu-latest
    outputs:
      instance_ip: ${{ steps.get_ip.outputs.ip }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      # --- THIS IS THE FIX ---
      # This step now has logic to handle the 'terminated' state correctly.
      - name: Ensure Instance is Running and Get IP
        id: get_ip
        run: |
          # Get the Instance ID using the tag.
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=TechNova-Server-Terraform" "Name=instance-state-name,Values=running,stopped" --query "Reservations[0].Instances[0].InstanceId" --output text)
          
          if [ "$INSTANCE_ID" == "None" ]; then
            echo "No running or stopped instance found with tag 'TechNova-Server-Terraform'. This is unexpected."
            echo "Please re-run 'terraform apply' to create a new instance."
            exit 1
          fi
          
          echo "Found Instance ID: $INSTANCE_ID"

          # Check the current state of the instance.
          INSTANCE_STATE=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].State.Name" --output text)
          echo "Instance state is: $INSTANCE_STATE"

          # If the instance is stopped, start it.
          if [ "$INSTANCE_STATE" == "stopped" ]; then
            echo "Instance is stopped. Sending start command..."
            aws ec2 start-instances --instance-ids $INSTANCE_ID
            echo "Waiting for instance to enter 'running' state..."
            aws ec2 wait instance-running --instance-ids $INSTANCE_ID
            echo "Instance is now running."
          elif [ "$INSTANCE_STATE" == "terminated" ]; then
            echo "FATAL: The instance has been terminated. A new 'terraform apply' is required."
            exit 1
          fi
          
          # Now that we know it's running, get the public IP.
          ip_address=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "Instance Public IP: $ip_address"
          echo "ip=${ip_address}" >> $GITHUB_OUTPUT

  deploy:
    name: 'Build and Deploy Application'
    runs-on: ubuntu-latest
    needs: provision

    steps:
      # ... (The rest of your deploy job remains exactly the same) ...
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/technova-app:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.provision.outputs.instance_ip }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Wait for the Docker daemon itself to be responsive
            echo "Connecting to server... Waiting for Docker daemon to start..."
            for i in {1..30}; do
              if sudo docker info &> /dev/null; then
                echo "Docker daemon is running."
                break
              fi
              echo "Still waiting for Docker daemon... (attempt $i of 30)"
              sleep 5
            done

            if ! sudo docker info &> /dev/null; then
              echo "FATAL: Docker daemon did not start in time."
              exit 1
            fi
            
            # Set permissions on the docker socket
            sudo chmod 666 /var/run/docker.sock

            # Run the deployment commands
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/technova-app:latest
            docker stop technova-app || true
            docker rm technova-app || true
            docker run -d --name technova-app -p 80:80 ${{ secrets.DOCKERHUB_USERNAME }}/technova-app:latest
            echo "Deployment to EC2 successful!"